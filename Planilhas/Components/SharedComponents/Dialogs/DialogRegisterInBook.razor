<MudDialog>
  <DialogContent>
    <section class="d-flex flex-column gap-3 w-100 justify-content-between">
      <div class="d-flex gap-3 w-100">
        <MudSelect T="string" Variant="Variant.Filled" @bind-Value="_typeRegister"
                   @bind-Value:after="ToggleDisplayForms"
                   Label="Tipo">
          <MudSelectItem Value="@("input")">Entradas</MudSelectItem>
          <MudSelectItem Value="@("output")">Saídas</MudSelectItem>
          <MudSelectItem Value="@("deposit")">Depósito</MudSelectItem>
        </MudSelect>

        @switch (_typeRegister)
        {
          case "input":
            <MudSelect T="string" Variant="Variant.Filled" @bind-Value="_typeOfInput" Label="Tipo de entrada" Clearable>
              @foreach (InputsType type in Enum.GetValues(typeof(InputsType)))
              {
                <MudSelectItem Value="@type.ToString()">@type.GetDisplayName()</MudSelectItem>
              }
            </MudSelect>
            break;

          case "output":
            <MudSelect T="string" Variant="Variant.Filled" @bind-Value="_typeOfOutput" Label="Tipo de saída" Clearable>
              @foreach (OutputsType type in Enum.GetValues(typeof(OutputsType)))
              {
                <MudSelectItem Value="@type.ToString()">@type.GetDisplayName()</MudSelectItem>
              }
            </MudSelect>
            break;
        }
      </div>

      @switch (_typeRegister)
      {
        case "input":
          <div class="d-flex flex-column gap-3 w-100">
            <div class="d-flex gap-3 w-100">
              <MudTextField T="int" @bind-Value="_registerInputs.Talao" Variant="Variant.Filled" Label="Talão"/>
              <MudTextField T="DateTime" @bind-Value="_registerInputs.Date" Variant="Variant.Filled" Label="Data"/>
            </div>
            @if (string.IsNullOrEmpty(_typeOfInput))
            {
              <MudTextField T="string" @bind-Value="_registerInputs.Name" Variant="Variant.Filled" Label="Nome"/>
            }
            <div class="d-flex gap-3 w-100">
              <MudTextField T="double?" @bind-Value="_registerInputs.Dizimo" Variant="Variant.Filled" Label="Dízimo"/>
              <MudTextField T="double?" @bind-Value="_registerInputs.Oferta" Variant="Variant.Filled" Label="Oferta"/>
            </div>
          </div>
          break;
        case "output":
          <MudTextField T="string" Variant="Variant.Filled" Label="Valor"/>
          break;
        case "deposit":
          <div class="d-flex gap-3 w-100">
            <MudTextField T="string" Variant="Variant.Filled" Label="Data"/>
            <MudTextField T="string" Variant="Variant.Filled" Label="Recibo Nº"/>
            <MudTextField T="string" Variant="Variant.Filled" Label="Valor"/>
          </div>
          break;
      }
    </section>
  </DialogContent>
  <DialogActions>
    <MudButton OnClick="Close">Fechar</MudButton>
    <MudButton OnClick="AddNewRegisterInput" Variant="Variant.Filled" Color="Color.Primary">Registrar</MudButton>
  </DialogActions>
</MudDialog>



@code{
  [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
  private string _typeRegister = "input";
  private string? _typeOfInput;
  private string? _typeOfOutput;
  private bool _displayFormByInputs = true;

  private readonly RegisterInputs _registerInputs = new RegisterInputs();

  private void ToggleDisplayForms() => _displayFormByInputs = !_displayFormByInputs;

  private void Close() => MudDialog.Close();

  private async Task AddNewRegisterInput()
  {
    await RegisterInputsService.AddRegisterInput(_registerInputs);
  }
}
